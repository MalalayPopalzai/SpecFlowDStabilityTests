// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace SpecFlowDStabilityTests.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Calculator")]
    public partial class CalculatorFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
#line 1 "Calculator.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en"), "Features", "Calculator", null, ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Undo-Redo for modification of scenario properties")]
        [NUnit.Framework.CategoryAttribute("USFE-3")]
        public void Undo_RedoForModificationOfScenarioProperties()
        {
            string[] tagsOfScenario = new string[] {
                    "USFE-3"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Undo-Redo for modification of scenario properties", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 8
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 9
 testRunner.When("I open new project in D-GEO Suite D-Stability", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 10
 testRunner.Then("the selection button has the name \'Scenario 1 - Stage 1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                            "ScenarioName",
                            "ScenarioIndex"});
                table1.AddRow(new string[] {
                            "Scenario 1",
                            "1"});
#line 11
 testRunner.When("I change the scenario:", ((string)(null)), table1, "When ");
#line hidden
                TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                            "SelectionName",
                            "Notes",
                            "PropertyPanelCaption"});
                table2.AddRow(new string[] {
                            "Scenario 1",
                            "",
                            "Scenario"});
#line 14
 testRunner.Then("there are the following properties:", ((string)(null)), table2, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                            "SelectionName",
                            "Notes"});
                table3.AddRow(new string[] {
                            "Test scenario 1",
                            "Note scenario 1"});
#line 17
 testRunner.When("I modifythere the following properties:", ((string)(null)), table3, "When ");
#line hidden
#line 20
 testRunner.Then("the selection button has the name \'Test scenario 1 - Stage 1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                            "ScenarioName",
                            "ScenarioIndex"});
                table4.AddRow(new string[] {
                            "Test scenario 1",
                            "1"});
#line 21
 testRunner.When("I change the scenario:", ((string)(null)), table4, "When ");
#line hidden
                TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                            "SelectionName",
                            "Notes",
                            "PropertyPanelCaption"});
                table5.AddRow(new string[] {
                            "Test scenario 1",
                            "Note scenario 1",
                            "Scenario"});
#line 24
 testRunner.Then("there are the following properties:", ((string)(null)), table5, "Then ");
#line hidden
#line 27
 testRunner.When("I undo the geometry changes", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 28
 testRunner.And("I undo the geometry changes", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 29
 testRunner.Then("the selection button has the name \'Scenario 1 - Stage 1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                            "ScenarioName",
                            "ScenarioIndex"});
                table6.AddRow(new string[] {
                            "Scenario 1",
                            "1"});
#line 30
 testRunner.When("I change the scenario:", ((string)(null)), table6, "When ");
#line hidden
                TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                            "SelectionName",
                            "Notes",
                            "PropertyPanelCaption"});
                table7.AddRow(new string[] {
                            "Scenario 1",
                            "",
                            "Scenario"});
#line 33
 testRunner.Then("there are the following properties:", ((string)(null)), table7, "Then ");
#line hidden
#line 36
 testRunner.When("I redo the geometry changes", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 37
 testRunner.And("I redo the geometry changes", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 38
 testRunner.Then("the selection button has the name \'Test scenario 1 - Stage 1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                            "ScenarioName",
                            "ScenarioIndex"});
                table8.AddRow(new string[] {
                            "Test scenario 1",
                            "1"});
#line 39
 testRunner.When("I change the scenario:", ((string)(null)), table8, "When ");
#line hidden
                TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                            "SelectionName",
                            "Notes",
                            "PropertyPanelCaption"});
                table9.AddRow(new string[] {
                            "Test scenario 1",
                            "Note scenario 1",
                            "Scenario"});
#line 42
    testRunner.Then("there are the following properties:", ((string)(null)), table9, "Then ");
#line hidden
#line 45
 testRunner.Then("I save the scenario \'my first test\' in the folder \'TestFiles\\FunctionalityTests\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
